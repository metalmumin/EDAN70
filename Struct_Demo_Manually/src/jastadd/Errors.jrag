import java.util.Set;
import java.util.TreeSet;

aspect Errors {
	public class ErrorMessage implements Comparable<ErrorMessage> {
		protected final String message;
		protected final int lineNumber;
		public ErrorMessage(String message, int lineNumber) {
			this.message = message;
			this.lineNumber = lineNumber;
		}
		public int compareTo(ErrorMessage other) {
			if (lineNumber == other.lineNumber) {
				return message.compareTo(other.message);
			}
			return Integer.compare(lineNumber, other.lineNumber); 
		}
		public String toString() {
			return "Error at line " + lineNumber + ": " + message;
		}
	} 
	protected ErrorMessage ASTNode.error(String message) {
		return new ErrorMessage(message, getLine(getStart()));
	}

	coll Set<ErrorMessage> Program.errors() [new TreeSet<ErrorMessage>()] with add root Program;

	inh Program ASTNode.program();
	eq Program.getChild().program() = this;
}


aspect ErrorContributions {
	IdDecl contributes error("Variable '" + getID() + "' is already declared.")
		when (isMultiplyDeclared())
		to Program.errors() for program();
	
	Dot contributes error("Variable '" + getRight().getID() + "' is not declared in " + getLeft().type().getType())
		when ((getLeft().type() != null) && (getRight().decl() == null))
		to Program.errors() for program();
				
	AssignStmt contributes error("Assignment to variable of type '" + getUseExpr().type().getType() + "' with type '" + getExpr().type().getType() + "' is illegal.")
		when (isCompatibleWith() == false && ( getUseExpr().type() != null  && getExpr().type() != null) )
		to Program.errors() for program();
	
	AssignStmt contributes error("The left-hand side has an undefined type.")
		when ((getUseExpr().type() == null  && getExpr().type() != null) )
		to Program.errors() for program();
				
	AssignStmt contributes error("The right-hand side has an undefined type.")
		when ((getUseExpr().type() != null  && getExpr().type() == null) )
		to Program.errors() for program();
}